/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface KrewPersonalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyKeys"
      | "calculateAdditionalTokenOwnerFee"
      | "claimKrewFee"
      | "createKrew"
      | "existsKrew"
      | "getBuyPrice"
      | "getBuyPriceAfterFee"
      | "getPrice"
      | "getSellPrice"
      | "getSellPriceAfterFee"
      | "holderBalance"
      | "initialize"
      | "krewOwnerFeePercent"
      | "krews"
      | "nextKrewId"
      | "oracleAddress"
      | "owner"
      | "protocolFeeDestination"
      | "protocolFeePercent"
      | "renounceOwnership"
      | "sellKeys"
      | "setKrewOwnerFeePercent"
      | "setOracleAddress"
      | "setProtocolFeeDestination"
      | "setProtocolFeePercent"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimKrewFee"
      | "Initialized"
      | "KrewCreated"
      | "OwnershipTransferred"
      | "SetKrewOwnerFeePercent"
      | "SetOracleAddress"
      | "SetProtocolFeeDestination"
      | "SetProtocolFeePercent"
      | "Trade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyKeys",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAdditionalTokenOwnerFee",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimKrewFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createKrew",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "existsKrew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPriceAfterFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPriceAfterFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holderBalance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "krewOwnerFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "krews", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nextKrewId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeDestination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellKeys",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setKrewOwnerFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeDestination",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "buyKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAdditionalTokenOwnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimKrewFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createKrew", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "existsKrew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "krewOwnerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "krews", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextKrewId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKrewOwnerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ClaimKrewFeeEvent {
  export type InputTuple = [
    owner: AddressLike,
    krew: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [owner: string, krew: bigint, fee: bigint];
  export interface OutputObject {
    owner: string;
    krew: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KrewCreatedEvent {
  export type InputTuple = [krewId: BigNumberish, creator: AddressLike];
  export type OutputTuple = [krewId: bigint, creator: string];
  export interface OutputObject {
    krewId: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetKrewOwnerFeePercentEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOracleAddressEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolFeeDestinationEvent {
  export type InputTuple = [destination: AddressLike];
  export type OutputTuple = [destination: string];
  export interface OutputObject {
    destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolFeePercentEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    trader: AddressLike,
    krew: BigNumberish,
    isBuy: boolean,
    amount: BigNumberish,
    price: BigNumberish,
    protocolFee: BigNumberish,
    krewOwnerFee: BigNumberish,
    additionalFee: BigNumberish,
    supply: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    krew: bigint,
    isBuy: boolean,
    amount: bigint,
    price: bigint,
    protocolFee: bigint,
    krewOwnerFee: bigint,
    additionalFee: bigint,
    supply: bigint
  ];
  export interface OutputObject {
    trader: string;
    krew: bigint;
    isBuy: boolean;
    amount: bigint;
    price: bigint;
    protocolFee: bigint;
    krewOwnerFee: bigint;
    additionalFee: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KrewPersonal extends BaseContract {
  connect(runner?: ContractRunner | null): KrewPersonal;
  waitForDeployment(): Promise<this>;

  interface: KrewPersonalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyKeys: TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish, oracleSignature: BytesLike],
    [void],
    "payable"
  >;

  calculateAdditionalTokenOwnerFee: TypedContractMethod<
    [price: BigNumberish, oracleSignature: BytesLike],
    [bigint],
    "view"
  >;

  claimKrewFee: TypedContractMethod<[krew: BigNumberish], [void], "nonpayable">;

  createKrew: TypedContractMethod<[], [void], "nonpayable">;

  existsKrew: TypedContractMethod<[krewId: BigNumberish], [boolean], "view">;

  getBuyPrice: TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getBuyPriceAfterFee: TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPrice: TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPriceAfterFee: TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  holderBalance: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _protocolFeeDestination: AddressLike,
      _protocolFeePercent: BigNumberish,
      _krewOwnerFeePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  krewOwnerFeePercent: TypedContractMethod<[], [bigint], "view">;

  krews: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        owner: string;
        supply: bigint;
        accumulatedFee: bigint;
      }
    ],
    "view"
  >;

  nextKrewId: TypedContractMethod<[], [bigint], "view">;

  oracleAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolFeeDestination: TypedContractMethod<[], [string], "view">;

  protocolFeePercent: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellKeys: TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish, oracleSignature: BytesLike],
    [void],
    "nonpayable"
  >;

  setKrewOwnerFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOracleAddress: TypedContractMethod<
    [_oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFeeDestination: TypedContractMethod<
    [_feeDestination: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFeePercent: TypedContractMethod<
    [_feePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyKeys"
  ): TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish, oracleSignature: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "calculateAdditionalTokenOwnerFee"
  ): TypedContractMethod<
    [price: BigNumberish, oracleSignature: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimKrewFee"
  ): TypedContractMethod<[krew: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createKrew"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "existsKrew"
  ): TypedContractMethod<[krewId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBuyPrice"
  ): TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBuyPriceAfterFee"
  ): TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPrice"
  ): TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPriceAfterFee"
  ): TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "holderBalance"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _protocolFeeDestination: AddressLike,
      _protocolFeePercent: BigNumberish,
      _krewOwnerFeePercent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "krewOwnerFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "krews"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        owner: string;
        supply: bigint;
        accumulatedFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextKrewId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeeDestination"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellKeys"
  ): TypedContractMethod<
    [krew: BigNumberish, amount: BigNumberish, oracleSignature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setKrewOwnerFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOracleAddress"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeeDestination"
  ): TypedContractMethod<[_feeDestination: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeePercent"
  ): TypedContractMethod<[_feePercent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ClaimKrewFee"
  ): TypedContractEvent<
    ClaimKrewFeeEvent.InputTuple,
    ClaimKrewFeeEvent.OutputTuple,
    ClaimKrewFeeEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "KrewCreated"
  ): TypedContractEvent<
    KrewCreatedEvent.InputTuple,
    KrewCreatedEvent.OutputTuple,
    KrewCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetKrewOwnerFeePercent"
  ): TypedContractEvent<
    SetKrewOwnerFeePercentEvent.InputTuple,
    SetKrewOwnerFeePercentEvent.OutputTuple,
    SetKrewOwnerFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "SetOracleAddress"
  ): TypedContractEvent<
    SetOracleAddressEvent.InputTuple,
    SetOracleAddressEvent.OutputTuple,
    SetOracleAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolFeeDestination"
  ): TypedContractEvent<
    SetProtocolFeeDestinationEvent.InputTuple,
    SetProtocolFeeDestinationEvent.OutputTuple,
    SetProtocolFeeDestinationEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolFeePercent"
  ): TypedContractEvent<
    SetProtocolFeePercentEvent.InputTuple,
    SetProtocolFeePercentEvent.OutputTuple,
    SetProtocolFeePercentEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;

  filters: {
    "ClaimKrewFee(address,uint256,uint256)": TypedContractEvent<
      ClaimKrewFeeEvent.InputTuple,
      ClaimKrewFeeEvent.OutputTuple,
      ClaimKrewFeeEvent.OutputObject
    >;
    ClaimKrewFee: TypedContractEvent<
      ClaimKrewFeeEvent.InputTuple,
      ClaimKrewFeeEvent.OutputTuple,
      ClaimKrewFeeEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "KrewCreated(uint256,address)": TypedContractEvent<
      KrewCreatedEvent.InputTuple,
      KrewCreatedEvent.OutputTuple,
      KrewCreatedEvent.OutputObject
    >;
    KrewCreated: TypedContractEvent<
      KrewCreatedEvent.InputTuple,
      KrewCreatedEvent.OutputTuple,
      KrewCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetKrewOwnerFeePercent(uint256)": TypedContractEvent<
      SetKrewOwnerFeePercentEvent.InputTuple,
      SetKrewOwnerFeePercentEvent.OutputTuple,
      SetKrewOwnerFeePercentEvent.OutputObject
    >;
    SetKrewOwnerFeePercent: TypedContractEvent<
      SetKrewOwnerFeePercentEvent.InputTuple,
      SetKrewOwnerFeePercentEvent.OutputTuple,
      SetKrewOwnerFeePercentEvent.OutputObject
    >;

    "SetOracleAddress(address)": TypedContractEvent<
      SetOracleAddressEvent.InputTuple,
      SetOracleAddressEvent.OutputTuple,
      SetOracleAddressEvent.OutputObject
    >;
    SetOracleAddress: TypedContractEvent<
      SetOracleAddressEvent.InputTuple,
      SetOracleAddressEvent.OutputTuple,
      SetOracleAddressEvent.OutputObject
    >;

    "SetProtocolFeeDestination(address)": TypedContractEvent<
      SetProtocolFeeDestinationEvent.InputTuple,
      SetProtocolFeeDestinationEvent.OutputTuple,
      SetProtocolFeeDestinationEvent.OutputObject
    >;
    SetProtocolFeeDestination: TypedContractEvent<
      SetProtocolFeeDestinationEvent.InputTuple,
      SetProtocolFeeDestinationEvent.OutputTuple,
      SetProtocolFeeDestinationEvent.OutputObject
    >;

    "SetProtocolFeePercent(uint256)": TypedContractEvent<
      SetProtocolFeePercentEvent.InputTuple,
      SetProtocolFeePercentEvent.OutputTuple,
      SetProtocolFeePercentEvent.OutputObject
    >;
    SetProtocolFeePercent: TypedContractEvent<
      SetProtocolFeePercentEvent.InputTuple,
      SetProtocolFeePercentEvent.OutputTuple,
      SetProtocolFeePercentEvent.OutputObject
    >;

    "Trade(address,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
  };
}
