/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface KrewPersonalInterface extends utils.Interface {
  functions: {
    "buyKeys(uint256,uint256,bytes)": FunctionFragment;
    "calculateAdditionalTokenOwnerFee(uint256,bytes)": FunctionFragment;
    "claimKrewFee(uint256)": FunctionFragment;
    "createKrew()": FunctionFragment;
    "existsKrew(uint256)": FunctionFragment;
    "getBuyPrice(uint256,uint256)": FunctionFragment;
    "getBuyPriceAfterFee(uint256,uint256)": FunctionFragment;
    "getPrice(uint256,uint256)": FunctionFragment;
    "getSellPrice(uint256,uint256)": FunctionFragment;
    "getSellPriceAfterFee(uint256,uint256)": FunctionFragment;
    "holderBalance(uint256,address)": FunctionFragment;
    "initialize(address,uint256,uint256)": FunctionFragment;
    "krewOwnerFeePercent()": FunctionFragment;
    "krews(uint256)": FunctionFragment;
    "nextKrewId()": FunctionFragment;
    "oracleAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFeeDestination()": FunctionFragment;
    "protocolFeePercent()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellKeys(uint256,uint256,bytes)": FunctionFragment;
    "setKrewOwnerFeePercent(uint256)": FunctionFragment;
    "setOracleAddress(address)": FunctionFragment;
    "setProtocolFeeDestination(address)": FunctionFragment;
    "setProtocolFeePercent(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyKeys"
      | "calculateAdditionalTokenOwnerFee"
      | "claimKrewFee"
      | "createKrew"
      | "existsKrew"
      | "getBuyPrice"
      | "getBuyPriceAfterFee"
      | "getPrice"
      | "getSellPrice"
      | "getSellPriceAfterFee"
      | "holderBalance"
      | "initialize"
      | "krewOwnerFeePercent"
      | "krews"
      | "nextKrewId"
      | "oracleAddress"
      | "owner"
      | "protocolFeeDestination"
      | "protocolFeePercent"
      | "renounceOwnership"
      | "sellKeys"
      | "setKrewOwnerFeePercent"
      | "setOracleAddress"
      | "setProtocolFeeDestination"
      | "setProtocolFeePercent"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyKeys",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAdditionalTokenOwnerFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimKrewFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createKrew",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "existsKrew",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPriceAfterFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPriceAfterFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "holderBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "krewOwnerFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "krews",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextKrewId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeDestination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellKeys",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setKrewOwnerFeePercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeDestination",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "buyKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAdditionalTokenOwnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimKrewFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createKrew", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "existsKrew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "krewOwnerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "krews", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextKrewId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKrewOwnerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ClaimKrewFee(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "KrewCreated(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetKrewOwnerFeePercent(uint256)": EventFragment;
    "SetOracleAddress(address)": EventFragment;
    "SetProtocolFeeDestination(address)": EventFragment;
    "SetProtocolFeePercent(uint256)": EventFragment;
    "Trade(address,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimKrewFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KrewCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKrewOwnerFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFeeDestination"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetProtocolFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
}

export interface ClaimKrewFeeEventObject {
  owner: string;
  krew: BigNumber;
  fee: BigNumber;
}
export type ClaimKrewFeeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimKrewFeeEventObject
>;

export type ClaimKrewFeeEventFilter = TypedEventFilter<ClaimKrewFeeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KrewCreatedEventObject {
  krewId: BigNumber;
  creator: string;
}
export type KrewCreatedEvent = TypedEvent<
  [BigNumber, string],
  KrewCreatedEventObject
>;

export type KrewCreatedEventFilter = TypedEventFilter<KrewCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetKrewOwnerFeePercentEventObject {
  percent: BigNumber;
}
export type SetKrewOwnerFeePercentEvent = TypedEvent<
  [BigNumber],
  SetKrewOwnerFeePercentEventObject
>;

export type SetKrewOwnerFeePercentEventFilter =
  TypedEventFilter<SetKrewOwnerFeePercentEvent>;

export interface SetOracleAddressEventObject {
  oracle: string;
}
export type SetOracleAddressEvent = TypedEvent<
  [string],
  SetOracleAddressEventObject
>;

export type SetOracleAddressEventFilter =
  TypedEventFilter<SetOracleAddressEvent>;

export interface SetProtocolFeeDestinationEventObject {
  destination: string;
}
export type SetProtocolFeeDestinationEvent = TypedEvent<
  [string],
  SetProtocolFeeDestinationEventObject
>;

export type SetProtocolFeeDestinationEventFilter =
  TypedEventFilter<SetProtocolFeeDestinationEvent>;

export interface SetProtocolFeePercentEventObject {
  percent: BigNumber;
}
export type SetProtocolFeePercentEvent = TypedEvent<
  [BigNumber],
  SetProtocolFeePercentEventObject
>;

export type SetProtocolFeePercentEventFilter =
  TypedEventFilter<SetProtocolFeePercentEvent>;

export interface TradeEventObject {
  trader: string;
  krew: BigNumber;
  isBuy: boolean;
  amount: BigNumber;
  price: BigNumber;
  protocolFee: BigNumber;
  krewOwnerFee: BigNumber;
  additionalFee: BigNumber;
  supply: BigNumber;
}
export type TradeEvent = TypedEvent<
  [
    string,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  TradeEventObject
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface KrewPersonal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KrewPersonalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyKeys(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateAdditionalTokenOwnerFee(
      price: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimKrewFee(
      krew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createKrew(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    existsKrew(
      krewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBuyPrice(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyPriceAfterFee(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      supply: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellPrice(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellPriceAfterFee(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    holderBalance(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _protocolFeeDestination: PromiseOrValue<string>,
      _protocolFeePercent: PromiseOrValue<BigNumberish>,
      _krewOwnerFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    krewOwnerFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    krews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        supply: BigNumber;
        accumulatedFee: BigNumber;
      }
    >;

    nextKrewId(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeDestination(overrides?: CallOverrides): Promise<[string]>;

    protocolFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellKeys(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKrewOwnerFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleAddress(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeDestination(
      _feeDestination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyKeys(
    krew: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    oracleSignature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateAdditionalTokenOwnerFee(
    price: PromiseOrValue<BigNumberish>,
    oracleSignature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimKrewFee(
    krew: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createKrew(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  existsKrew(
    krewId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBuyPrice(
    krew: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyPriceAfterFee(
    krew: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    supply: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellPrice(
    krew: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellPriceAfterFee(
    krew: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  holderBalance(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _protocolFeeDestination: PromiseOrValue<string>,
    _protocolFeePercent: PromiseOrValue<BigNumberish>,
    _krewOwnerFeePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  krewOwnerFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  krews(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      supply: BigNumber;
      accumulatedFee: BigNumber;
    }
  >;

  nextKrewId(overrides?: CallOverrides): Promise<BigNumber>;

  oracleAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFeeDestination(overrides?: CallOverrides): Promise<string>;

  protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellKeys(
    krew: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    oracleSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKrewOwnerFeePercent(
    _feePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleAddress(
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeDestination(
    _feeDestination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeePercent(
    _feePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyKeys(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateAdditionalTokenOwnerFee(
      price: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimKrewFee(
      krew: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createKrew(overrides?: CallOverrides): Promise<void>;

    existsKrew(
      krewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBuyPrice(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPriceAfterFee(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      supply: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPrice(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPriceAfterFee(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderBalance(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _protocolFeeDestination: PromiseOrValue<string>,
      _protocolFeePercent: PromiseOrValue<BigNumberish>,
      _krewOwnerFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    krewOwnerFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    krews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        supply: BigNumber;
        accumulatedFee: BigNumber;
      }
    >;

    nextKrewId(overrides?: CallOverrides): Promise<BigNumber>;

    oracleAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFeeDestination(overrides?: CallOverrides): Promise<string>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellKeys(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKrewOwnerFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleAddress(
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeDestination(
      _feeDestination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimKrewFee(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      krew?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): ClaimKrewFeeEventFilter;
    ClaimKrewFee(
      owner?: PromiseOrValue<string> | null,
      krew?: PromiseOrValue<BigNumberish> | null,
      fee?: null
    ): ClaimKrewFeeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "KrewCreated(uint256,address)"(
      krewId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null
    ): KrewCreatedEventFilter;
    KrewCreated(
      krewId?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null
    ): KrewCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetKrewOwnerFeePercent(uint256)"(
      percent?: null
    ): SetKrewOwnerFeePercentEventFilter;
    SetKrewOwnerFeePercent(percent?: null): SetKrewOwnerFeePercentEventFilter;

    "SetOracleAddress(address)"(
      oracle?: PromiseOrValue<string> | null
    ): SetOracleAddressEventFilter;
    SetOracleAddress(
      oracle?: PromiseOrValue<string> | null
    ): SetOracleAddressEventFilter;

    "SetProtocolFeeDestination(address)"(
      destination?: PromiseOrValue<string> | null
    ): SetProtocolFeeDestinationEventFilter;
    SetProtocolFeeDestination(
      destination?: PromiseOrValue<string> | null
    ): SetProtocolFeeDestinationEventFilter;

    "SetProtocolFeePercent(uint256)"(
      percent?: null
    ): SetProtocolFeePercentEventFilter;
    SetProtocolFeePercent(percent?: null): SetProtocolFeePercentEventFilter;

    "Trade(address,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256)"(
      trader?: PromiseOrValue<string> | null,
      krew?: PromiseOrValue<BigNumberish> | null,
      isBuy?: PromiseOrValue<boolean> | null,
      amount?: null,
      price?: null,
      protocolFee?: null,
      krewOwnerFee?: null,
      additionalFee?: null,
      supply?: null
    ): TradeEventFilter;
    Trade(
      trader?: PromiseOrValue<string> | null,
      krew?: PromiseOrValue<BigNumberish> | null,
      isBuy?: PromiseOrValue<boolean> | null,
      amount?: null,
      price?: null,
      protocolFee?: null,
      krewOwnerFee?: null,
      additionalFee?: null,
      supply?: null
    ): TradeEventFilter;
  };

  estimateGas: {
    buyKeys(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateAdditionalTokenOwnerFee(
      price: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimKrewFee(
      krew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createKrew(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    existsKrew(
      krewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPrice(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPriceAfterFee(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      supply: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPrice(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPriceAfterFee(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderBalance(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _protocolFeeDestination: PromiseOrValue<string>,
      _protocolFeePercent: PromiseOrValue<BigNumberish>,
      _krewOwnerFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    krewOwnerFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    krews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextKrewId(overrides?: CallOverrides): Promise<BigNumber>;

    oracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeDestination(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellKeys(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKrewOwnerFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleAddress(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeeDestination(
      _feeDestination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyKeys(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateAdditionalTokenOwnerFee(
      price: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimKrewFee(
      krew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createKrew(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    existsKrew(
      krewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyPrice(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyPriceAfterFee(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      supply: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellPrice(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellPriceAfterFee(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holderBalance(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _protocolFeeDestination: PromiseOrValue<string>,
      _protocolFeePercent: PromiseOrValue<BigNumberish>,
      _krewOwnerFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    krewOwnerFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    krews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextKrewId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeDestination(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellKeys(
      krew: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      oracleSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKrewOwnerFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleAddress(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeDestination(
      _feeDestination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeePercent(
      _feePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
